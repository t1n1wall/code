--- sys/netinet6/in6.h.orig	2010-12-21 17:09:25.000000000 +0000
+++ sys/netinet6/in6.h	2011-07-11 10:29:34.000000000 +0100
@@ -611,7 +611,10 @@
 #define IPV6CTL_STEALTH		45
 
 #define	ICMPV6CTL_ND6_ONLINKNSRFC4861	47
-#define IPV6CTL_MAXID		48
+#define IPV6CTL_NO_RADR		48	/* No defroute from RA */
+#define IPV6CTL_NORBIT_RAIF	49	/* Disable R-bit in NA on RA receiving IF. */
+#define IPV6CTL_RFC6204W3	50	/* Accept defroute from RA even if forwarding */
+#define IPV6CTL_MAXID		51	
 #endif /* __BSD_VISIBLE */
 
 /*
--- sys/netinet6/in6_proto.c.orig	2010-12-21 17:09:25.000000000 +0000
+++ sys/netinet6/in6_proto.c	2011-07-11 10:31:46.000000000 +0100
@@ -386,6 +386,9 @@
 VNET_DEFINE(int, ip6_defhlim) = IPV6_DEFHLIM;
 VNET_DEFINE(int, ip6_defmcasthlim) = IPV6_DEFAULT_MULTICAST_HOPS;
 VNET_DEFINE(int, ip6_accept_rtadv) = 0;
+VNET_DEFINE(int, ip6_no_radr) = 0;
+VNET_DEFINE(int, ip6_norbit_raif) = 0;
+VNET_DEFINE(int, ip6_rfc6204w3) = 0;
 VNET_DEFINE(int, ip6_maxfragpackets);	/* initialized in frag6.c:frag6_init() */
 VNET_DEFINE(int, ip6_maxfrags);		/* initialized in frag6.c:frag6_init() */
 VNET_DEFINE(int, ip6_log_interval) = 5;
@@ -512,6 +515,12 @@
 	CTLFLAG_RW, &VNET_NAME(ip6_maxfragpackets), 0, "");
 SYSCTL_VNET_INT(_net_inet6_ip6, IPV6CTL_ACCEPT_RTADV, accept_rtadv,
 	CTLFLAG_RW, &VNET_NAME(ip6_accept_rtadv), 0, "");
+SYSCTL_VNET_INT(_net_inet6_ip6, IPV6CTL_NO_RADR, no_radr,
+	CTLFLAG_RW, &VNET_NAME(ip6_no_radr), 0, "");
+SYSCTL_VNET_INT(_net_inet6_ip6, IPV6CTL_NORBIT_RAIF, norbit_raif, CTLFLAG_RW,
+	&VNET_NAME(ip6_norbit_raif), 0, "");
+SYSCTL_VNET_INT(_net_inet6_ip6, IPV6CTL_RFC6204W3, rfc6204w3, CTLFLAG_RW,
+	&VNET_NAME(ip6_rfc6204w3), 0, "");
 SYSCTL_VNET_INT(_net_inet6_ip6, IPV6CTL_KEEPFAITH, keepfaith, CTLFLAG_RW,
 	&VNET_NAME(ip6_keepfaith), 0, "");
 SYSCTL_VNET_INT(_net_inet6_ip6, IPV6CTL_LOG_INTERVAL, log_interval,
--- sys/netinet6/ip6_var.h.orig	2010-12-21 17:09:25.000000000 +0000
+++ sys/netinet6/ip6_var.h	2011-07-11 14:07:30.000000000 +0100
@@ -316,6 +316,9 @@
 VNET_DECLARE(int, ip6_maxfrags);	/* Maximum fragments in reassembly
 					 * queue */
 VNET_DECLARE(int, ip6_accept_rtadv);	/* Acts as a host not a router */
+VNET_DECLARE(int, ip6_no_radr);		/* No defroute from RA */
+VNET_DECLARE(int, ip6_norbit_raif);	/* Disable R-bit in NA on RA receiving IF. */
+VNET_DECLARE(int, ip6_rfc6204w3);	/* Allow defroute from RA when ip6_forwarding=1 */
 VNET_DECLARE(int, ip6_keepfaith);	/* Firewall Aided Internet Translator */
 VNET_DECLARE(int, ip6_log_interval);
 VNET_DECLARE(time_t, ip6_log_time);
@@ -327,6 +330,9 @@
 #define	V_ip6_maxfragpackets		VNET(ip6_maxfragpackets)
 #define	V_ip6_maxfrags			VNET(ip6_maxfrags)
 #define	V_ip6_accept_rtadv		VNET(ip6_accept_rtadv)
+#define V_ip6_no_radr			VNET(ip6_no_radr)
+#define V_ip6_norbit_raif		VNET(ip6_norbit_raif)
+#define V_ip6_rfc6204w3			VNET(ip6_rfc6204w3)
 #define	V_ip6_keepfaith			VNET(ip6_keepfaith)
 #define	V_ip6_log_interval		VNET(ip6_log_interval)
 #define	V_ip6_log_time			VNET(ip6_log_time)
--- sys/netinet6/nd6.c.orig	2011-07-05 23:02:19.000000000 +0000
+++ sys/netinet6/nd6.c	2011-07-05 23:48:18.000000000 +0000
@@ -184,7 +184,7 @@
 	 * we won't accept RAs by default even if we set ND6_IFF_ACCEPT_RTADV
 	 * here.
 	 */
-	nd->flags = (ND6_IFF_PERFORMNUD | ND6_IFF_ACCEPT_RTADV);
+	nd->flags = (ND6_IFF_PERFORMNUD | ND6_IFF_ACCEPT_RTADV | ND6_IFF_NO_RADR);
 
 	/* XXX: we cannot call nd6_setmtu since ifp is not fully initialized */
 	nd6_setmtu0(ifp, nd);
@@ -807,7 +807,7 @@
 	if (V_nd6_defifindex == ifp->if_index)
 		nd6_setdefaultiface(0);
 
-	if (!V_ip6_forwarding && V_ip6_accept_rtadv) { /* XXX: too restrictive? */
+	if (V_ip6_accept_rtadv) { /* XXX: too restrictive? */
 		/* refresh default router list
 		 *
 		 * 
@@ -1011,7 +1011,7 @@
 
 	ifp = ln->lle_tbl->llt_ifp;
 
-	if (!V_ip6_forwarding) {
+	if (ND_IFINFO(ifp)->flags & ND6_IFF_ACCEPT_RTADV) {
 
 		dr = defrouter_lookup(&L3_ADDR_SIN6(ln)->sin6_addr, ifp);
 
@@ -1679,7 +1679,7 @@
 	 * for those are not autoconfigured hosts, we explicitly avoid such
 	 * cases for safety.
 	 */
-	if (do_update && router && !V_ip6_forwarding && V_ip6_accept_rtadv) {
+	if (do_update && router && V_ip6_accept_rtadv) {
 		/*
 		 * guaranteed recursion
 		 */
--- sys/netinet6/nd6.h.orig	2011-07-05 23:02:25.000000000 +0000
+++ sys/netinet6/nd6.h	2011-07-05 23:50:53.000000000 +0000
@@ -84,6 +84,7 @@
 				     * DAD failure.  (XXX: not ND-specific)
 				     */
 #define ND6_IFF_DONT_SET_IFROUTE	0x10
+#define ND6_IFF_NO_RADR		0x40
 
 #define	ND6_CREATE		LLE_CREATE
 #define	ND6_EXCLUSIVE		LLE_EXCLUSIVE
--- sys/netinet6/nd6_nbr.c.orig	2011-07-06 00:00:01.000000000 +0000
+++ sys/netinet6/nd6_nbr.c	2011-07-06 00:05:41.000000000 +0000
@@ -113,9 +113,13 @@
 	int lladdrlen = 0;
 	int anycast = 0, proxy = 0, tentative = 0;
 	int tlladdr;
+	int rflag;
 	union nd_opts ndopts;
 	struct sockaddr_dl proxydl;
 	char ip6bufs[INET6_ADDRSTRLEN], ip6bufd[INET6_ADDRSTRLEN];
+	rflag = (V_ip6_forwarding) ? ND_NA_FLAG_ROUTER : 0;
+	if (ND_IFINFO(ifp)->flags & ND6_IFF_ACCEPT_RTADV && V_ip6_norbit_raif)
+		rflag = 0;
 
 #ifndef PULLDOWN_TEST
 	IP6_EXTHDR_CHECK(m, off, icmp6len,);
@@ -858,7 +861,8 @@
 			dr = defrouter_lookup(in6, ln->lle_tbl->llt_ifp);
 			if (dr)
 				defrtrlist_del(dr);
-			else if (!V_ip6_forwarding) {
+			else if (ND_IFINFO(ln->lle_tbl->llt_ifp)->flags &
+				ND6_IFF_ACCEPT_RTADV) {
 				/*
 				 * Even if the neighbor is not in the default
 				 * router list, the neighbor may be used
--- sys/netinet6/nd6_rtr.c.orig	2010-12-21 17:09:25.000000000 +0000
+++ sys/netinet6/nd6_rtr.c	2011-07-11 10:40:21.000000000 +0100
@@ -130,9 +130,12 @@
 	union nd_opts ndopts;
 	char ip6bufs[INET6_ADDRSTRLEN], ip6bufd[INET6_ADDRSTRLEN];
 
-	/* If I'm not a router, ignore it. */
-	if (V_ip6_accept_rtadv != 0 || V_ip6_forwarding != 1)
-		goto freeit;
+	/*
+	* Accept RS only when V_ip6_forwarding=1 and the interface has
+	* no ND6_IFF_ACCEPT_RTADV.
+	*/
+	if (ND_IFINFO(ifp)->flags & ND6_IFF_ACCEPT_RTADV)
+ 		goto freeit;
 
 	/* Sanity checks */
 	if (ip6->ip6_hlim != 255) {
@@ -216,10 +219,9 @@
 	char ip6bufs[INET6_ADDRSTRLEN], ip6bufd[INET6_ADDRSTRLEN];
 
 	/*
-	 * We only accept RAs only when
-	 * the system-wide variable allows the acceptance, and
-	 * per-interface variable allows RAs on the receiving interface.
-	 */
+	* We only accept RAs only when the per-interface flag
+	* ND6_IFF_ACCEPT_RTADV is on the receiving interface.
+ 	*/
 	if (V_ip6_accept_rtadv == 0)
 		goto freeit;
 	if (!(ndi->flags & ND6_IFF_ACCEPT_RTADV))
@@ -271,7 +273,15 @@
 	bzero(&dr0, sizeof(dr0));
 	dr0.rtaddr = saddr6;
 	dr0.flags  = nd_ra->nd_ra_flags_reserved;
-	dr0.rtlifetime = ntohs(nd_ra->nd_ra_router_lifetime);
+	/*
+	 * Effectively-disable the route in the RA packet
+	 * when ND6_IFF_NO_RADR on the receiving interface or
+	 * ip6.forwarding=1.
+	 */
+	if (ndi->flags & ND6_IFF_NO_RADR || (V_ip6_forwarding && !V_ip6_rfc6204w3))
+		dr0.rtlifetime = 0;
+	else
+		dr0.rtlifetime = ntohs(nd_ra->nd_ra_router_lifetime);
 	dr0.expire = time_second + dr0.rtlifetime;
 	dr0.ifp = ifp;
 	/* unspecified or not? (RFC 2461 6.3.4) */
@@ -560,7 +577,7 @@
 	 * Flush all the routing table entries that use the router
 	 * as a next hop.
 	 */
-	if (!V_ip6_forwarding && V_ip6_accept_rtadv) /* XXX: better condition? */
+	if (ND_IFINFO(dr->ifp)->flags & ND6_IFF_ACCEPT_RTADV)
 		rt6_flush(&dr->rtaddr, dr->ifp);
 
 	if (dr->installed) {
@@ -619,20 +629,6 @@
 	struct llentry *ln = NULL;
 
 	/*
-	 * This function should be called only when acting as an autoconfigured
-	 * host.  Although the remaining part of this function is not effective
-	 * if the node is not an autoconfigured host, we explicitly exclude
-	 * such cases here for safety.
-	 */
-	if (V_ip6_forwarding || !V_ip6_accept_rtadv) {
-		nd6log((LOG_WARNING,
-		    "defrouter_select: called unexpectedly (forwarding=%d, "
-		    "accept_rtadv=%d)\n", V_ip6_forwarding, V_ip6_accept_rtadv));
-		splx(s);
-		return;
-	}
-
-	/*
 	 * Let's handle easy case (3) first:
 	 * If default router list is empty, there's nothing to be done.
 	 */
--- sys/netinet6/nd6_nbr.c.orig	2013-06-02 22:47:22.000000000 +0100
+++ sys/netinet6/nd6_nbr.c	2013-09-13 19:23:46.000000000 +0100
@@ -347,8 +347,7 @@
 			goto bad;
 		nd6_na_output_fib(ifp, &in6_all, &taddr6,
 		    ((anycast || proxy || !tlladdr) ? 0 : ND_NA_FLAG_OVERRIDE) |
-		    (V_ip6_forwarding ? ND_NA_FLAG_ROUTER : 0),
-		    tlladdr, proxy ? (struct sockaddr *)&proxydl : NULL,
+		    rflag, tlladdr, proxy ? (struct sockaddr *)&proxydl : NULL,
 		    M_GETFIB(m));
 		goto freeit;
 	}
--- sys/netinet6/nd6_nbr.c.orig	2013-06-02 22:47:22.000000000 +0100
+++ sys/netinet6/nd6_nbr.c	2013-09-13 19:32:44.000000000 +0100
@@ -354,7 +354,7 @@
 
 	nd6_na_output_fib(ifp, &saddr6, &taddr6,
 	    ((anycast || proxy || !tlladdr) ? 0 : ND_NA_FLAG_OVERRIDE) |
-	    (V_ip6_forwarding ? ND_NA_FLAG_ROUTER : 0) | ND_NA_FLAG_SOLICITED,
+	    rflag | ND_NA_FLAG_SOLICITED,
 	    tlladdr, proxy ? (struct sockaddr *)&proxydl : NULL, M_GETFIB(m));
  freeit:
 	if (ifa != NULL)
--- sys/netinet6/nd6.c.orig	2013-06-02 22:47:22.000000000 +0100
+++ sys/netinet6/nd6.c	2013-09-13 19:37:36.000000000 +0100
@@ -950,7 +950,7 @@
 	 * XXX: we restrict the condition to hosts, because routers usually do
 	 * not have the "default router list".
 	 */
-	if (!V_ip6_forwarding && TAILQ_EMPTY(&V_nd_defrouter) &&
+	if (ND_IFINFO(ifp)->flags & ND6_IFF_ACCEPT_RTADV && TAILQ_FIRST(&V_nd_defrouter) == NULL &&
 	    V_nd6_defifindex == ifp->if_index) {
 		return (1);
 	}
